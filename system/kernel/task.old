#include "kernel.h"
#include "task.h"

#include <libk.h>
#include <kstring.h>
#include <kstdlib.h>

#define TASK_COUNT 10

struct task *current_proc;
struct task ptable[TASK_COUNT];
static int pid_count;

void task1(void);
void task2(void);



void multitasking_init(void)
{

/*  TODO:
    - method for setting up new PD
 
*/
    for(int i = 0; i < TASK_COUNT; i++){
        ptable[i].pid = -1;
        ptable[i].context = NULL;
        ptable[i].stack_space = NULL;
        ptable[i].stack_size = 0;
        ptable[i].page_dir = (phys_bytes) kvirt_to_phys(boot_page_directory);
    }

    pid_count = 1;
    current_proc = &ptable[0];  

    current_proc->pid = 0;
    current_proc->stack_space = kernel_stack_bottom;
    current_proc->stack_size = KERNEL_STACK_SIZE;

    task_create(task2, 512);
    task1();
}

void task_create(void * starting_point, size_t stacksize){
    int i;
    void *stack;
    vir_bytes sp;
    struct task *new;
    intr_stack_t *context;
 
    for(i = 0; i < TASK_COUNT && ptable[i].pid >= 0; i++);
    
    if(i == TASK_COUNT)
        return;

    stack = kmalloc(stacksize);
    if(stack == NULL)
        return;

    new = &ptable[i];

    new->pid = pid_count++;
    new->stack_space = stack;
    new->stack_size = stacksize;


//TODO: setup context
    sp = (vir_bytes) stack + stacksize;
    context = ((intr_stack_t *) sp) - 1;
    context->ebp = sp;
    context->eip = (uint32_t) starting_point;

    new->context = context;

}


void task1(void){
    int a = 0;
    while(1){
        arch_display_number(a++, 0, 15);
     //   kprintf("Task1 \n");
        if(a % 1000 == 0)
            switch_to_task(&ptable[1]);
    }
}
void task2(void){
    int a = 0;
    while(1){
      //  kprintf("Task2 \n");
        arch_display_number(a++, 30, 15);
        switch_to_task(&ptable[0]);
    }
}