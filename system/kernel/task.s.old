
# C declaration:
#   void switch_to_task(thread_control_block *next_thread)#
#
# WARNING: Caller is expected to disable IRQs before calling, and enable IRQs again after function returns

.global switch_to_task
.type switch_to_task, @function
switch_to_task:
 
    # Save previous task's state
 
    # Notes:
    #   For cdecl; EAX, ECX, and EDX are already saved by the caller and don't need to be saved again
    #   EIP is already saved on the stack by the caller's "CALL" instruction
    #   The task isn't able to change CR3 so it doesn't need to be saved
    #   Segment registers are constants (while running kernel code) so they don't need to be saved
 
    push %ebx
    push %esi
    push %edi
    push %ebp
	mov %cr3, %eax
	push %eax
 
    mov current_proc, %edi    # edi = address of the previous task's "thread control block"
    mov %esp, (%edi)        	 # Save ESP for previous task's kernel stack in the thread's TCB
 
    # Load next task's state
 
    mov (4*(5+1))(%esp), %esi         # esi = address of the next task's "thread control block" (parameter passed on stack)
    mov %esi,  current_proc   	# Current task's TCB is the next task TCB
 
	
    mov (%esi), %esp        		  # Load ESP for next task's kernel stack from the thread's TCB
    pop %eax         	  # eax = address of page directory for next task
 #    mov ebx,[esi+TCB.ESP0]        # ebx = address for the top of the next task's kernel stack
  #   mov [TSS.ESP0],ebx            # Adjust the ESP0 field in the TSS (used by CPU for for CPL=3 -> CPL=0 privilege level changes)
    mov %cr3, %ecx                   # ecx = previous task's virtual address space
 
    cmp %ecx, %eax                   # Does the virtual address space need to being changed?
    je .doneVAS                   #  no, virtual address space is the same, so don't reload it and cause TLB flushes
    mov %eax, %cr3                   #  yes, load the next task's virtual address space
.doneVAS:
 
    pop %ebp
    pop %edi
    pop %esi
    pop %ebx
 
    ret                           # Load next task's EIP from its kernel stack
